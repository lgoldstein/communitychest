<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
                http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">


	<!-- STARTING POINT (get called by web.xml filter): The way acegi work is loading a chain of filter to do its work.
		"filterChainProxy" creates a chain of filters which in turn start -->
	<bean id="filterChainProxy"
		class="org.acegisecurity.util.FilterChainProxy">
		<property name="filterInvocationDefinitionSource">
			<value>
				CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT
				/**=httpSessionContextIntegrationFilter,logoutFilter,authenticationProcessingFilter,securityContextHolderAwareRequestFilter,anonymousProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor
			</value>
		</property>
	</bean>


	<!-- The HttpSessionContextIntegrationFilter maintains the
		Authentication object between various requests and passes it
		around to the AuthenticationManager and the
		AccessDecisionManager when needed -->
	<bean id="httpSessionContextIntegrationFilter" class="org.acegisecurity.context.HttpSessionContextIntegrationFilter" />


	<!--  logout when no credentials exist  -->
	<bean id="logoutFilter"
		class="org.acegisecurity.ui.logout.LogoutFilter">
		<constructor-arg value="/logoutSuccess.html" />
		<!-- URL redirected to after logout -->
		<constructor-arg>
			<list>
				<bean class="org.acegisecurity.ui.logout.SecurityContextLogoutHandler" />
			</list>
		</constructor-arg>
	</bean>



	<!-- The AuthenticationProcessingFilter handles the Authentication
		Request Check (“logging into the application”). It uses the
		AuthenticationManager to do its work. -->
	<bean id="authenticationProcessingFilter" class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilter">
		<property name="authenticationManager"    ref="authenticationManager" /> <!-- Manages validation of principal's credentials -->
		<property name="authenticationFailureUrl" value="/login.jsp?login_error=1" />
		<property name="defaultTargetUrl"         value="/" />
		<property name="filterProcessesUrl"       value="/j_acegi_security_check" />
	</bean>

	<!-- A Filter which populates the ServletRequest with a new request wrapper. -->
	<bean id="securityContextHolderAwareRequestFilter" class="org.acegisecurity.wrapper.SecurityContextHolderAwareRequestFilter" />

	<!-- Detects if there is no Authentication object in the SecurityContextHolder, and populates it with one if needed. -->
	<bean id="anonymousProcessingFilter" class="org.acegisecurity.providers.anonymous.AnonymousProcessingFilter">
		<property name="key" value="changeThis" />
		<property name="userAttribute"  value="anonymousUser,ROLE_ANONYMOUS" />
	</bean>



	<!-- The ExceptonTranslationFilter performs the Existing
		Authentication Check, handles security exceptions and takes
		the appropriate action. This action can be either spawning the
		authentication dialog (a.k.a. the login form) or returning the
		appropriate HTTP security error code. 
		ExceptonTranslationFilter depends on the 
		FilterSecurityInterceptor, to do its work.
		
		may do one of the following two things : 
		1. If the exception was caused by the absence of an Authentication object (i.e. the user has not logged in yet), 
		   it spawns the configured AuthenticationEntryPoint to prompt the user for login.
		2. If the exception was caused by an authorization exception thrown by FilterSecurityInterceptor (i.e.
		   the user is logged in but is not authorized for the resource requested), 
		   ExceptionTranslationFilter will send an SC_FORBIDDEN (HTTP 403) error to the browser, 
		   which will display it’s built-in version of an ‘unauthorized access’ page.
		-->
	<bean id="exceptionTranslationFilter" class="org.acegisecurity.ui.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint">
			<!-- starting point of the authentication dialog -->
			<bean class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint">
				<property name="loginFormUrl" value="/login.jsp" />
				<property name="forceHttps" value="false" />
			</bean>
		</property>
		<property name="accessDeniedHandler">
			<bean class="org.acegisecurity.ui.AccessDeniedHandlerImpl">
				<property name="errorPage" value="/accessDenied.jsp" />
			</bean>
		</property>
	</bean>


	<!--FilterSecurityInterceptor manages the Restricted Access
		Check,and the Authorisation check. It knows which resources
		are secure and which roles have access to them.
		FilterSecurityInterceptor uses the AuthenticationManager and
		AccessDecisionManager to do its work. -->
	<bean id="filterInvocationInterceptor"  class="org.acegisecurity.intercept.web.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager"> <!-- The AccessDecisionManager takes the available user information and decides to grant access -->
			<bean class="org.acegisecurity.vote.AffirmativeBased">
				<property name="allowIfAllAbstainDecisions" value="false" />
				<property name="decisionVoters">
					<list>
						<bean class="org.acegisecurity.vote.RoleVoter" />
						<bean class="org.acegisecurity.vote.AuthenticatedVoter" />
					</list>
				</property>
			</bean>
		</property>
		<property name="objectDefinitionSource"><!-- In Acegi security, “secured resources” are called “object definitions” -->
			<!-- according to GlobalPermission we get => ROLE_CREATE_POLICIES , ROLE_CREATE_RULE_POLICIE_TEMPLATES , ROLE_VIEW_AUDIT_LOG , ROLE_ADIMINISTRATOR -->
			<value>
				CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT
				/**=IS_AUTHENTICATED_ANONYMOUSLY
			<!--
				/login.jsp**=IS_AUTHENTICATED_ANONYMOUSLY
				/index.jsp**=IS_AUTHENTICATED_ANONYMOUSLY
				/web-inf/jsp/login.jsp**=IS_AUTHENTICATED_ANONYMOUSLY
				/css/**=IS_AUTHENTICATED_ANONYMOUSLY
				/images/**=IS_AUTHENTICATED_ANONYMOUSLY
				/script/**=IS_AUTHENTICATED_ANONYMOUSLY
				/admin/**=ROLE_ADIMINISTRATOR
				/**=IS_AUTHENTICATED_FULLY
				-->	
			</value>	
		</property>
	</bean>

	<!-- Manages validation of principal's credentials -->
	<bean id="authenticationManager" class="org.acegisecurity.providers.ProviderManager">
		<property name="providers">
			<list>
				<ref local="daoAuthenticationProvider" /> <!-- data base retrieves usernames, passwords and roles -->
				<bean class="org.acegisecurity.providers.anonymous.AnonymousAuthenticationProvider">
					<property name="key" value="changeThis" /> <!-- retrieves Anonymous usernames, passwords  -->
				</bean>
				<ref local="ldapAuthenticationProvider" /> <!-- retrieves usernames, passwords and roles from ldap -->
			</list>
		</property>
	</bean>

	<!-- **************************** entry point for fiji bypassing acegi filter invocation order *************** -->
	<!-- Manages validation of principal's credentials -->
	<bean id="dummyProviderManager" class="com.emc.fiji.server.security.DummyProviderManagerImpl">
		<property name="localAuthenticationProvider" ref="cstAuthenticationProvider"/>
		<property name="ldapAuthenticationProvider" ref="ldapAuthenticationProvider"/>
		<property name="userProfileDao" ref="userProfileDao" /> 	
	</bean>

	<!-- retrieves usernames, passwords and roles -->
	<bean id="daoAuthenticationProvider" class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailsService" /> <!-- contains usernames, passwords and roles --><!--
		<property name="userCache">
			<bean class="org.acegisecurity.providers.dao.cache.EhCacheBasedUserCache">
				<property name="cache">
					<bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
						<property name="cacheManager">
							<bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />
						</property>
						<property name="cacheName" value="userCache" />
					</bean>
				</property>
			</bean>
		</property>-->
		<property name="passwordEncoder" ref="passwordEncoderSHA" />
	</bean>

<!-- retrieves usernames, passwords and roles -->
	<bean id="cstAuthenticationProvider" class="com.emc.fiji.server.security.cst.CSTAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailsService" /> 
		<property name="bootstrapPath" value="${CST_CONFIG_FOLDER}"></property>
		<property name="authorityName" value="LocalDirectoryItcase"></property>
	</bean>


	<!-- There are many ways in which an LDAP directory can be configured so this class delegates most 
		 of its responsibilites to two separate strategy interfaces, LdapAuthenticator  and LdapAuthoritiesPopulator. -->
	<bean id="ldapAuthenticationProvider" class="org.acegisecurity.providers.ldap.LdapAuthenticationProvider" scope="prototype">
		<constructor-arg>
		<!--  The implementation for locating and authenticating an Ldap user.
			  The LdapAuthenticationProvider calls this class to authenticate a user and obtain the information for that user from the directory.
			  implements =>   LdapUserDetails authenticate(String username, String password) ;

			  ldapuser : ajaxuser 
			  password : 123456 
		-->
			<bean class="com.emc.fiji.server.security.ldap.BindAuthenticatorWithDbLdapSettings" scope="prototype">
				<property name="directoryDetailsService" ref="directoryDetailsService" />
				<property name="userProfileDao" ref="userProfileDao" /> 
			</bean>
		</constructor-arg>

		<!-- Obtains a list of granted authorities for an Ldap user.
	 		 (GrantedAuthority = Represents an authority granted to an Authentication object. 
	 		  A GrantedAuthority must either represent itself as a String or be specifically supported by an AccessDecisionManager.)
			 implements => GrantedAuthority[] getGrantedAuthorities(LdapUserDetails userDetails)
		 -->
		<constructor-arg>
			<bean class="com.emc.fiji.server.security.ldap.DaoBasedAuthoritiesPopulator" scope="prototype" />
		</constructor-arg>
	</bean>

	 <!-- contains usernames, passwords and roles -->
	<bean id="userDetailsService" class="com.emc.fiji.server.security.DaoUserDetailsServiceImpl">
		<property name="userProfileDao" ref="userProfileDao" /> <!-- implements =>  UserDetails loadUserByUsername(String username) ; -->
	</bean>

	<!-- This bean is optional; it isn't used by any other bean as it only listens and logs -->
	<bean id="loggerListener"    class="org.acegisecurity.event.authentication.LoggerListener" />

	<bean id="directoryDetailsService" class="com.emc.fiji.server.service.DirectoryDetailsServiceImpl">
		<property name="dao" ref="ldapSettingsDao" />
	</bean>
	

</beans>